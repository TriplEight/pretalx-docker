volumes:
  pretalx-public-2024.3.0:
  pretalx-data-2024.3.0:
  pretalx-postgres-2024.3.0:
  pretalx-redis-2024.3.0:

networks:
  pretalx-data:

x-default: &default
  networks:
    - data-2024.3.0
  restart: unless-stopped

x-healthcheck: &healthcheck
  start_period: 10s
  interval: 30s
  retries: 5
  timeout: 3s

x-pretalx: &pretalx
  <<: *default
  image: ${PRETALX_IMAGE}:${PRETALX_TAG}
  volumes:
    - pretalx-data-2024.3.0:/data
    - pretalx-public-2024.3.0:/public
  env_file:
    - .env

x-pretalx-depends-on: &pretalx-depends-on
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
    migrations:
      condition: service_completed_successfully

services:

  web:
    <<: *default
    image: docker.io/library/nginx:alpine
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - pretalx-public-2024.3.0:/public
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - data-2024.3.0
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M

  app:
    <<: [*pretalx, *pretalx-depends-on]
    command: gunicorn
    healthcheck:
      test: ["CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://localhost:8080 | grep -q 200"]
      <<: *healthcheck
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  worker:
    <<: [*pretalx, *pretalx-depends-on]
    command: celery
    healthcheck:
      test: ["CMD-SHELL", "pgrep celery"]
      <<: *healthcheck

  cron:
    <<: [*pretalx, *pretalx-depends-on]
    command: cron
    user: root
    init: true
    healthcheck:
      test: ["CMD-SHELL", "pgrep cron"]
      <<: *healthcheck

  migrations:
    <<: *pretalx
    command: migrate
    restart: "no"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  postgres:
    <<: *default
    image: docker.io/library/postgres:15-alpine
    volumes:
      - pretalx-postgres-2024.3.0:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD
      - POSTGRES_USER
      - POSTGRES_DB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s

  redis:
    <<: *default
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    volumes:
      - pretalx-redis-2024.3.0:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      <<: *healthcheck

