# Make sure to follow the steps in the README.md file to configure the environment variables
# and the traefik configuration files before running this stack.

volumes:
  public:
  data:
  postgres:
  redis:

networks:
  data:
  web:

x-default: &default
  networks:
    - data
  restart: unless-stopped

x-healthcheck: &healthcheck
  start_period: 10s
  interval: 30s
  retries: 5
  timeout: 3s

x-pretalx: &pretalx
  <<: *default
  image: ghcr.io/tripleight/pretalx-extended:2024.3.0-cron
  volumes:
    - data:/data
    - public:/public
  env_file:
    - stack.env
  environment:
    - PRETALX_LOG_LEVEL
    - PRETALX_DB_NAME
    - PRETALX_DB_USER
    - PRETALX_DB_PASS
    - PRETALX_DATA_DIR
    - PRETALX_FILESYSTEM_LOGS
    - PRETALX_FILESYSTEM_MEDIA
    - PRETALX_FILESYSTEM_STATIC
    - PRETALX_DEBUG
    - PRETALX_SITE_URL
    - PRETALX_SITE_CSP
    - PRETALX_SITE_CSP_STYLE
    - PRETALX_SITE_CSP_SCRIPT
    - PRETALX_SITE_CSP_IMG
    - PRETALX_SITE_CSP_FORM
    - PRETALX_DB_TYPE
    - PRETALX_DB_HOST
    - PRETALX_DB_PORT
    - PRETALX_MAIL_FROM
    - PRETALX_MAIL_HOST
    - PRETALX_MAIL_PORT
    - PRETALX_MAIL_USER
    - PRETALX_MAIL_PASSWORD
    - PRETALX_MAIL_TLS
    - PRETALX_MAIL_SSL
    - PRETALX_CELERY_BACKEND
    - PRETALX_CELERY_BROKER
    - PRETALX_REDIS
    - PRETALX_REDIS_SESSIONS
    - PRETALX_LOGGING_EMAIL
    - PRETALX_LOGGING_EMAIL_LEVEL
    - PRETALX_LANGUAGE_CODE
    - PRETALX_TIME_ZONE

x-pretalx-depends-on-databases: &pretalx-depends-on-databases
  redis:
    condition: service_healthy
  postgres:
    condition: service_healthy

x-pretalx-depends-on-migrations: &pretalx-depends-on-migrations
  <<: *pretalx-depends-on-databases
  migrations:
    condition: service_completed_successfully


services:

  # reverse proxy, remove if you have your own
  traefik:
    image: traefik:v2.10
    security_opt:
      - no-new-privileges:true
    ports:
      - 80:80
      - 443:443
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/portainer/pretalx/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - /etc/portainer/pretalx/traefik/dynamic:/etc/traefik/dynamic:ro
      - /etc/portainer/pretalx/traefik/acme.json:/etc/traefik/acme.json
    networks:
      - web
    restart: unless-stopped
    labels:
      traefik.enable: true
      # Router for the dashboard
      traefik.http.routers.dashboard.rule: Host(`${TRAEFIK_DASHBOARD_FQDN}`)
      traefik.http.routers.dashboard.service: api@internal
      traefik.http.routers.dashboard.tls: true
      traefik.http.routers.dashboard.tls.certresolver: letsencrypt
      traefik.http.routers.dashboard.middlewares: auth-middleware
      traefik.http.middlewares.auth-middleware.basicauth.users: ${TRAEFIK_AUTH}

  app:
    <<: *pretalx
    command: gunicorn
    labels:
      traefik.enable: true
      # Router for the application
      traefik.http.routers.pretalx.rule: Host(`${FQDN}`)
      traefik.http.routers.pretalx.tls: true
      traefik.http.routers.pretalx.tls.certresolver: letsencrypt
      traefik.http.routers.pretalx.middlewares: secureHeaders@file,rateLimit@file
      traefik.http.services.pretalx.loadbalancer.server.port: 8080
      # Static files router
      traefik.http.routers.pretalx-static.rule: Host(`${FQDN}`) && (PathPrefix(`/static/`) || PathPrefix(`/media/`))
      traefik.http.routers.pretalx-static.tls: true
      traefik.http.routers.pretalx-static.tls.certresolver: letsencrypt
      traefik.http.routers.pretalx-static.service: pretalx-static
      traefik.http.services.pretalx-static.loadbalancer.server.port: 8080
      # Add caching headers for static files
      traefik.http.middlewares.static-headers.headers.customResponseHeaders.Cache-Control: "public,max-age=31536000"
      traefik.http.routers.pretalx-static.middlewares: static-headers

    networks:
      - web
      - data
    volumes:
      - data:/data
      - public:/public

    deploy:
      replicas: 1

    healthcheck:
      test: ['CMD-SHELL', 'bash -c "[[ $(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8080) == \"200\" ]]" || exit 1']
      <<: *healthcheck

    depends_on: *pretalx-depends-on-migrations

  worker:
    <<: *pretalx
    command: celery

    deploy:
      replicas: 1

    healthcheck:
      test: ['CMD-SHELL', 'bash -c "[[ \"$(pgrep celery)\" != \"\" ]]" || exit 1']
      <<: *healthcheck

    depends_on: *pretalx-depends-on-migrations

  cron:
    <<: *pretalx
    command: cron
    user: root
    init: true

    healthcheck:
      test: ['CMD-SHELL', 'bash -c "[[ \"$(pgrep cron)\" != \"\" ]]" || exit 1']
      <<: *healthcheck

    depends_on: *pretalx-depends-on-migrations

  migrations:
    <<: *pretalx
    command: migrate
    restart: no

    depends_on: *pretalx-depends-on-databases


  postgres:
    <<: *default
    image: docker.io/library/postgres:15-alpine
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}']
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - postgres:/var/lib/postgresql/data
    env_file:
      - stack.env
    environment:
      - POSTGRES_PASSWORD
      - POSTGRES_USER
      - POSTGRES_DB

  redis:
    <<: *default
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli ping | grep PONG']
      <<: *healthcheck
    volumes:
      - redis:/data
